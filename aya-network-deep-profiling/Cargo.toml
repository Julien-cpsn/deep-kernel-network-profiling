[package]
name = "aya-network-deep-profiling"
version = "0.1.0"
edition.workspace = true

license.workspace = true

[features]
default = []
user-space-program = ["aya-network-deep-profiling-common/user-space-program"]

[dependencies]
aya-network-deep-profiling-common = { path = "../aya-network-deep-profiling-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
pretty_env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal", "time"] }

# CLI
clap = { workspace = true }
clap-verbosity-flag = { workspace = true }

serde = { workspace = true }
serde_json = { workspace = true }

# Utils
once_cell = "1.21.3"
rayon = { workspace = true }
network-types = { workspace = true }
getifaddrs = "0.2.0"
parking_lot = { version = "0.12.4", features = ["send_guard"] }

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
aya-network-deep-profiling-ebpf = { path = "../aya-network-deep-profiling-ebpf" }

[[bin]]
name = "aya-network-deep-profiling"
path = "src/main.rs"
